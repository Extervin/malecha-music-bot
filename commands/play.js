const { SlashCommandBuilder } = require('discord.js');
const { QueryType, useMainPlayer } = require('discord-player');

const spotify = require('@spotify/web-api-ts-sdk'); // Spotify API

// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Spotify API, –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω—ã –≤ .env
const SPOTIFY_CLIENT_ID = process.env.SPOTIFY_CLIENT_ID || null;
const SPOTIFY_CLIENT_SECRET = process.env.SPOTIFY_CLIENT_SECRET || null;

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É –∏–∑ YouTube, Spotify –∏ SoundCloud')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞')
                .setRequired(true)
        ),
    async execute(interaction) {
        try {
            await interaction.deferReply({ ephemeral: false });

            console.log('‚è≥ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /play...');

            const player = useMainPlayer();
            let query = interaction.options.getString('query');
            const channel = interaction.member.voice.channel;

            if (!channel) {
                return interaction.followUp('‚ùå –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!');
            }

            console.log(`‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: ${channel.name}`);

            let searchType = QueryType.AUTO;

            if (query.includes('spotify.com')) {
                try {
                    if (!SPOTIFY_CLIENT_ID || !SPOTIFY_CLIENT_SECRET) {
                        console.warn('‚ö†Ô∏è Spotify API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫.');
                    } else {
                        const spotifyClient = spotify.SpotifyApi.withClientCredentials(
                            SPOTIFY_CLIENT_ID,
                            SPOTIFY_CLIENT_SECRET
                        );

                        const trackId = query.split('/track/')[1]?.split('?')[0];
                        if (!trackId) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Spotify-—Å—Å—ã–ª–∫–∏');

                        const trackData = await spotifyClient.tracks.get(trackId);
                        query = `${trackData.artists[0].name} - ${trackData.name}`;
                        console.log(`üéµ Spotify-—Å—Å—ã–ª–∫–∞, –Ω–∞–π–¥–µ–Ω–æ: ${query}`);
                    }
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Spotify-—Å—Å—ã–ª–∫–∏: ${error.message}`);
                    return interaction.followUp('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Spotify-—Å—Å—ã–ª–∫—É.');
                }
            } 

            console.log(`üîé –ò—â–µ–º —Ç—Ä–µ–∫: ${query} (–¢–∏–ø: ${searchType})`);

            let searchResult = await player.search(query, {
                requestedBy: interaction.user,
                searchEngine: searchType
            });

            if (!searchResult.tracks.length) {
                console.log('‚ùå –û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return interaction.followUp('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            }

            let track = searchResult.tracks[0];

            const queue = await player.nodes.create(interaction.guild, {
                metadata: interaction.channel,
                selfDeaf: true,
                leaveOnEnd: true
            });

            if (!queue.connection) {
                console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É...');
                await queue.connect(channel);
            }

            console.log(`üéµ –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${track.title}`);
            await queue.addTrack(track);

            if (!queue.node.isPlaying()) {
                await queue.node.play();
            }

            await interaction.followUp(`üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **${track.title}**`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${error.message}`);

            if (!interaction.replied && !interaction.deferred) {
                await interaction.followUp('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞.');
            }
        }
    }
};
